# Video capture

```elixir
File.cd(__DIR__)
Logger.configure(level: :error)

Mix.install([
  {:membrane_core, "~> 1.0"},
  {:membrane_file_plugin, "~> 0.17.0"},
  {:membrane_kino_plugin, path: ".."},
  {:membrane_opus_plugin, "~> 0.20.0"},
  {:membrane_aac_fdk_plugin, "~> 0.18.0"},
  {:membrane_aac_plugin, "~> 0.18.0"},
  {:membrane_wav_plugin, "~> 0.10.0"},
  {:membrane_generator_plugin, "~> 0.10.0"},
  {:membrane_raw_audio_format, "~> 0.12.0"},
  {:membrane_matroska_plugin, "~> 0.5.1"},
  {:membrane_portaudio_plugin, "~> 0.19.2"},
  {:membrane_ffmpeg_swresample_plugin, "~> 0.20.1"},
  {:membrane_h26x_plugin, "~> 0.10.2"}
])
```

## Section

```elixir
import Membrane.ChildrenSpec

alias Membrane.Time

kino_input =
  Membrane.Kino.Input.new(
    audio: false,
    video: true,
    flush_time: Time.milliseconds(20)
  )

kino_player =
  Membrane.Kino.Player.new(
    audio: false,
    video: true,
    flush_time: Time.milliseconds(50)
  )

video_loopback =
  child(:input, %Membrane.Kino.Input.VideoSource{kino: kino_input})
  |> via_in(:video)
  |> child(:player, %Membrane.Kino.Player.Sink{kino: kino_player})

structure = video_loopback
pipeline = Membrane.RCPipeline.start!()
Membrane.RCPipeline.exec_actions(pipeline, spec: structure)

Kino.render(kino_input)
kino_player
```
