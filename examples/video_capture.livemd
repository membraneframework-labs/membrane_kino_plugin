# Video capture and loopback

```elixir
File.cd(__DIR__)
Logger.configure(level: :error)

Mix.install([
  {:membrane_core, "~> 1.0"},
  {:membrane_kino_plugin, path: ".."},
  # livebook doesn't cooperate
  {:membrane_raw_video_format, "~> 0.3.0"},
  {:membrane_ffmpeg_swscale_plugin, "~> 0.15.1"},
  {:membrane_h264_ffmpeg_plugin, "~> 0.31.6"},
  {:membrane_h264_rgb_plugin, path: "../../membrane_h264_rgb_plugin"}
])
```

## Pipeline definition

Live input video is requested from web browser (webcam), fed into elixir pipeline and back into kino player.

```elixir
import Membrane.ChildrenSpec

alias Membrane.Time
alias Membrane.RCPipeline, as: RC

width = 100
height = 100

kino_input =
  Membrane.Kino.Input.new(
    audio: true,
    video: %{desired_width: width, desired_height: height},
    flush_time: Time.milliseconds(10)
  )

kino_player =
  Membrane.Kino.Player.new(
    audio: true,
    video: true,
    mirror: true,
    flush_time: Time.milliseconds(10)
  )

video_loopback =
  child(:source, %Membrane.Kino.Input.VideoSource{kino: kino_input})
  # |> child(:rgb_decoder, %Membrane.H264_RGB.Decoder{
  # resolution: %{width: width, height: height}
  # resolution: :native
  # })
  # |> child(:rgb_encoder, Membrane.H264_RGB.Encoder)
  |> via_in(:video)
  |> child(:player, %Membrane.Kino.Player.Sink{kino: kino_player})

:ok
```

## Playing pipeline

```elixir
pipeline = RC.start!()
RC.exec_actions(pipeline, spec: video_loopback)

Kino.render(kino_input)
kino_player
```
